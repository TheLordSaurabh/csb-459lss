{"version":3,"sources":["components/ScoreBoard.js","components/NumberPlayer.js","components/Box.js","components/Board.js","components/RedoButton.js","components/ResetAndRestart.js","Home.js","Source.js","About.js","Developer.js","Nav.js","App.js","index.js"],"names":["ScoreBoard","_ref","scores","is_x_playing","x_score","o_score","x_bottom","o_bottom","React","createElement","className","concat","NumberPlayer","mode","changeMode","text","val","onClick","value","Box","style","Board","board","map","idx","RedoButton","redo","ResetAndRestart","resetBoard","restartGame","Home","win_combinations","getOpponent","player","inf","ninf","MaxNode","state","main_player","parent_beta","arguments","length","undefined","_classCallCheck","this","opponent","alpha","_toConsumableArray","final_state","Array","fill","n","createBranches","_createClass","key","array1","array2","i","arry","nArr","arr","push","splice","allDone","checkWin","temp","minnode","MinNode","beta","parent_alpha","maxnode","_useState","useState","_useState2","_slicedToArray","setXPlaying","_useState3","_useState4","setBoard","_useState5","_useState6","setScores","_useState7","_useState8","is_game_over","setGameOver","_useState9","_useState10","turns","setTurns","_useState11","_useState12","last_board","setLastBoard","_useState13","_useState14","is_one_player","setOnePlayer","window","confirm","nextRound","checkForWinner","_win_combinations$i","x","y","z","boxIdx","updatedBoard","winner","_objectSpread","alert","setTimeout","updatedBoardai","equalArray","allEmpty","Source","open","location","href","About","Developer","Nav","Link","to","App","Router","Switch","Route","path","exact","component","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0566752c.chunk.js","sourcesContent":["import React from 'react'\n\nimport \"./ScoreBoard.css\"\n\nexport const ScoreBoard = ({ scores, is_x_playing }) => {\n  const { x_score, o_score } = scores;\n  let x_bottom = \"\";\n  let o_bottom = \"\";\n  if(is_x_playing === true){\n    o_bottom = \"inactive\";\n  }\n  else{\n    x_bottom = \"inactive\";\n  }\n  return (\n    <div className=\"scoreboard\">\n      <span className={`score x-score ${x_bottom}`}>X - {x_score}</span>\n      <span className={`score o-score ${o_bottom}`}>O - {o_score}</span>\n    </div>\n  )\n}\n","import React from \"react\";\n\nimport \"./NumberPlayer.css\";\n\nexport const NumberPlayer = ({ mode, changeMode }) => {\n  const text =\n    mode === true ? \"Change to 2 Player Mode?\" : \"Change to Human Vs AI Mode?\";\n  const val = mode === true ? \"2-Player\" : \"1-Player\";\n  return (\n    <button className=\"rbtn\" onClick={changeMode} value={val}>\n      {text}\n    </button>\n  );\n};\n","import React from \"react\";\n\nimport \"./Box.css\";\n\nexport const Box = ({ value, onClick }) => {\n  let style = \"box\";\n  if (value === \"X\") {\n    style = \"box x\";\n  }\n  if (value === \"O\") {\n    style = \"box o\";\n  }\n  return (\n    <button className={style} onClick={onClick}>\n      {value}\n    </button>\n  );\n};\n\n//<button className={style} onClick={onClick}>{value}</button>\n","import React from \"react\";\n\nimport { Box } from \"./Box\";\nimport \"./Board.css\";\n\nexport const Board = ({ board, onClick }) => {\n  return (\n    <div className=\"board\">\n      {board.map((value, idx) => {\n        return (\n          <Box\n            value={value}\n            onClick={() => {\n              value === null && onClick(idx);\n            }}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport \"./RedoButton.css\";\n\nexport const RedoButton = ({ redo }) => {\n    return (\n        <button className=\"reset-btn\" onClick={redo}>Redo</button>\n    )\n}\n","import React from \"react\";\n\nimport \"./ResetAndRestart.css\";\n\nexport const ResetAndRestart = ({ resetBoard, restartGame }) => {\n  return (\n    <div className=\"ResetAndRestart\">\n      <div className=\"center_div\">\n        <div className=\"btn_div\">\n          <button className=\"rbtn\" onClick={resetBoard}>\n            Reset\n          </button>\n          <button className=\"rbtn\" onClick={restartGame}>\n            Restart\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport { ScoreBoard } from \"./components/ScoreBoard\";\nimport { NumberPlayer } from \"./components/NumberPlayer\";\nimport { Board } from \"./components/Board\";\nimport { RedoButton } from \"./components/RedoButton\";\nimport { ResetAndRestart } from \"./components/ResetAndRestart\";\n\nexport default function Home() {\n  const win_combinations = [\n    [0, 1, 2],\n    [0, 3, 6],\n    [0, 4, 8],\n    [6, 7, 8],\n    [2, 5, 8],\n    [3, 4, 5],\n    [1, 4, 7],\n    [2, 4, 6]\n  ];\n\n  function getOpponent(player) {\n    return player === \"X\" ? \"O\" : \"X\";\n  }\n  //Limits\n  const inf = 1000000000;\n  const ninf = -1000000000;\n\n  class MaxNode {\n    constructor(state, player, main_player, parent_beta = inf) {\n      this.main_player = main_player;\n      this.parent_beta = parent_beta;\n      this.player = player;\n      this.opponent = getOpponent(this.player);\n      this.alpha = ninf;\n      this.state = [...state];\n      this.final_state = Array(9).fill(null);\n      this.n = this.state.length;\n      this.createBranches();\n    }\n    copyArray(array1, array2) {\n      for (let i = 0; i < array1.length; i++) {\n        array1[i] = array2[i];\n      }\n    }\n\n    allDone(state) {\n      for (let i = 0; i < 9; i++) {\n        if (state[i] === null) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    //if player wins then return 1, 1 for opponent wins and 0 if draw\n    checkWin(arry, player) {\n      let nArr = [];\n      let arr = [...arry];\n      while (arr.length > 0) {\n        nArr.push(arr.splice(0, 3));\n      }\n      let state = [...nArr];\n\n      for (let i = 0; i < 3; i++) {\n        if (state[i][0] === state[i][1] && state[i][1] === state[i][2]) {\n          if (state[i][0] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[i][0] === player) {\n            return 1;\n          }\n        }\n      }\n      for (let i = 0; i < 3; i++) {\n        if (state[0][i] === state[1][i] && state[1][i] === state[2][i]) {\n          if (state[0][i] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[0][i] === player) {\n            return 1;\n          }\n        }\n      }\n\n      //checking diagnols\n      //top left - bottom right\n      if (state[0][0] === state[1][1] && state[1][1] === state[2][2]) {\n        if (state[0][0] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][0] === player) {\n          return 1;\n        }\n      }\n      //top right - bottom left\n      if (state[0][2] === state[1][1] && state[2][0] === state[1][1]) {\n        if (state[0][2] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][2] === player) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n\n    createBranches() {\n      if (this.allDone(this.state)) {\n        this.final_state = [...this.state];\n        this.alpha = this.checkWin(this.state, this.main_player);\n        return this.alpha;\n      }\n      let temp = [...this.state];\n      for (let i = 0; i < 9; i++) {\n        //Pruning happens when current alpha is greater than the parent beta\n        if (this.parent_beta < this.alpha) {\n          return this.alpha;\n        }\n        //Exploring the new search trees\n        if (temp[i] === null) {\n          temp[i] = this.player; //Making New Move\n\n          let win_ = this.checkWin(temp, this.main_player);\n          if (win_ === 1) {\n            this.alpha = 1;\n            this.final_state = [...temp];\n            temp[i] = null; //Removing the introduced Move\n            return this.alpha;\n          }\n          let minnode = new MinNode(\n            temp,\n            this.opponent,\n            this.main_player,\n            this.alpha\n          );\n          if (minnode.beta > this.alpha) {\n            this.alpha = minnode.beta;\n            this.final_state = [...temp];\n          }\n          temp[i] = null; //Removing the introduced Move\n        }\n      }\n      return this.alpha;\n    }\n  }\n\n  class MinNode {\n    constructor(state, player, main_player, parent_alpha = ninf) {\n      this.main_player = main_player;\n      this.parent_alpha = parent_alpha;\n      this.player = player;\n      this.opponent = getOpponent(this.player);\n      this.beta = inf;\n      this.state = [...state];\n      this.final_state = Array(9).fill(null);\n      this.n = this.state.length;\n      this.createBranches();\n    }\n    copyArray(array1, array2) {\n      for (let i = 0; i < array1.length; i++) {\n        array1[i] = array2[i];\n      }\n    }\n\n    allDone(state) {\n      for (let i = 0; i < 9; i++) {\n        if (state[i] === null) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    //if player wins then return 1, 1 for opponent wins and 0 if draw\n    checkWin(arry, player) {\n      let arr = [...arry];\n      let nArr = [];\n      while (arr.length > 0) {\n        nArr.push(arr.splice(0, 3));\n      }\n      let state = nArr;\n\n      for (let i = 0; i < 3; i++) {\n        if (state[i][0] === state[i][1] && state[i][1] === state[i][2]) {\n          if (state[i][0] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[i][0] === player) {\n            return 1;\n          }\n        }\n      }\n      for (let i = 0; i < 3; i++) {\n        if (state[0][i] === state[1][i] && state[1][i] === state[2][i]) {\n          if (state[0][i] === getOpponent(player)) {\n            return -1;\n          }\n          if (state[0][i] === player) {\n            return 1;\n          }\n        }\n      }\n\n      //checking diagnols\n      //top left - bottom right\n      if (state[0][0] === state[1][1] && state[1][1] === state[2][2]) {\n        if (state[0][0] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][0] === player) {\n          return 1;\n        }\n      }\n      //top right - bottom left\n      if (state[0][2] === state[1][1] && state[2][0] === state[1][1]) {\n        if (state[0][2] === getOpponent(player)) {\n          return -1;\n        }\n        if (state[0][2] === player) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n\n    createBranches() {\n      if (this.allDone(this.state)) {\n        this.final_state = [...this.state];\n        this.beta = this.checkWin(this.state, this.main_player);\n        return this.beta;\n      }\n      let temp = [...this.state];\n      for (let i = 0; i < 9; i++) {\n        //Pruning happens when current beta is less than the parent alpha or alphas of all the alpha nodes\n        if (this.parent_alpha > this.beta) {\n          return this.beta;\n        }\n        //Exploring the new search trees\n        if (temp[i] === null) {\n          temp[i] = this.player; //Making New Move\n          let win_ = this.checkWin(temp, this.main_player);\n          if (win_ === -1) {\n            this.beta = -1;\n            this.final_state = [...temp];\n            temp[i] = null; //Removing the introduced Move\n            return this.beta;\n          }\n\n          let maxnode = new MaxNode(\n            temp,\n            this.opponent,\n            this.main_player,\n            this.beta\n          );\n          temp[i] = null; //Removing the introduced Move\n          if (maxnode.alpha < this.beta) {\n            this.beta = maxnode.alpha;\n            this.final_state = [...temp];\n          }\n        }\n      }\n      return this.beta;\n    }\n  }\n\n  const [is_x_playing, setXPlaying] = useState(true);\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [scores, setScores] = useState({ x_score: 0, o_score: 0 });\n  const [is_game_over, setGameOver] = useState(false);\n  const [turns, setTurns] = useState(1);\n  const [last_board, setLastBoard] = useState(Array(9).fill(null));\n  const [is_one_player, setOnePlayer] = useState(false);\n\n  const mainBoardHandling = (boxIdx) => {\n    //2-Player Game\n    if (is_one_player === false) {\n      setLastBoard(board);\n      // Update the board\n      const updatedBoard = board.map((value, idx) => {\n        if (idx === boxIdx) {\n          return is_x_playing ? \"X\" : \"O\";\n        } else {\n          return value;\n        }\n      });\n\n      //Check for winner and update the score\n      let winner = checkForWinner(updatedBoard);\n\n      if (winner) {\n        if (winner === \"O\") {\n          let { o_score } = scores;\n          o_score += 1;\n          setScores({ ...scores, o_score });\n        } else {\n          let { x_score } = scores;\n          x_score += 1;\n          setScores({ ...scores, x_score });\n        }\n        alert(`Player - ${winner} won the round ;)`);\n        //if(is_one_player === true) setXPlaying(true);\n        setTimeout(nextRound(), 3000);\n        return;\n      } else {\n        //check if all boxes are filled and there is draw\n        if (turns === 9)\n          if (is_game_over === false) {\n            setTurns(1);\n            //if(is_one_player === true) setXPlaying(true);\n            setGameOver(true);\n            alert(`Draw :0`);\n            setTimeout(nextRound(), 3000);\n            return;\n          }\n      }\n\n      setBoard(updatedBoard);\n      const count = turns + 1;\n      setTurns(count);\n\n      //Alternating the player\n      setXPlaying(!is_x_playing);\n    } else {\n      if (is_x_playing === true) {\n        setLastBoard(board);\n        // Update the board\n        const updatedBoard = board.map((value, idx) => {\n          if (idx === boxIdx) {\n            return is_x_playing ? \"X\" : \"O\";\n          } else {\n            return value;\n          }\n        });\n\n        //Check for winner and update the score\n        let winner = checkForWinner(updatedBoard);\n\n        if (winner) {\n          if (winner === \"O\") {\n            let { o_score } = scores;\n            o_score += 1;\n            setScores({ ...scores, o_score });\n          } else {\n            let { x_score } = scores;\n            x_score += 1;\n            setScores({ ...scores, x_score });\n          }\n          alert(`Player - ${winner} won the round ;)`);\n          setXPlaying(true);\n          setTimeout(nextRound(), 1000);\n          return;\n        } else {\n          //check if all boxes are filled and there is draw\n          if (turns === 9)\n            if (is_game_over === false) {\n              setTurns(1);\n              setXPlaying(true);\n              setGameOver(true);\n              alert(`Draw :0`);\n              setTimeout(nextRound(), 1000);\n              return;\n            }\n        }\n\n        setBoard(updatedBoard);\n        const count = turns + 1;\n        setTurns(count);\n\n        //Alternating the player\n        setXPlaying(!is_x_playing);\n      } else {\n        //AI's Turn\n        if (turns !== 9) {\n          let temp = [...board];\n          let maxnode = new MaxNode(temp, \"O\", \"O\", inf);\n          const updatedBoardai = [...maxnode.final_state];\n\n          const count = turns + 1;\n          setTurns(count);\n\n          //Check for winner and update the score\n          const winner = checkForWinner(updatedBoardai);\n\n          if (winner) {\n            if (winner === \"O\") {\n              let { o_score } = scores;\n              o_score += 1;\n              setScores({ ...scores, o_score });\n            } else {\n              let { x_score } = scores;\n              x_score += 1;\n              setScores({ ...scores, x_score });\n            }\n            alert(`Player - ${winner} won the round ;)`);\n            setXPlaying(true);\n            setTimeout(nextRound(), 1000);\n            return;\n          } else {\n            //check if all boxes are filled and there is draw\n            if (turns === 9)\n              if (is_game_over === false) {\n                setTurns(1);\n                setXPlaying(true);\n                setGameOver(true);\n                alert(`Draw :0AI`);\n                setTimeout(nextRound(), 1000);\n                return;\n              }\n          }\n\n          setBoard(updatedBoardai);\n\n          setTurns(turns + 1);\n\n          //Alternating the player\n          setXPlaying(!is_x_playing);\n        }\n      }\n    }\n  };\n\n  const allEmpty = () => {\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === \"X\" || board[i] === \"O\") {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const equalArray = (array1, array2) => {\n    if (!(array1.length === array2.length)) {\n      return false;\n    }\n\n    for (let i = 0; i < array1.length; i++) {\n      if (!(array1[i] === array2[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const restartGame = () => {\n    let conf_msg = \"Do you want to restart the game??\";\n    if (!window.confirm(conf_msg)) {\n      return;\n    }\n    if (is_one_player === true) setXPlaying(true);\n    setTurns(1);\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n    setLastBoard(Array(9).fill(null));\n    setScores({ x_score: 0, o_score: 0 });\n  };\n\n  const resetBoard = () => {\n    let conf_msg = \"Do you want to reset the Board??\";\n    if (!window.confirm(conf_msg)) {\n      return;\n    }\n    if (is_one_player === true) setXPlaying(true);\n    setTurns(1);\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n    setLastBoard(Array(9).fill(null));\n  };\n\n  const nextRound = () => {\n    setTurns(1);\n    if (is_one_player === true) setXPlaying(true);\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n    setLastBoard(Array(9).fill(null));\n  };\n\n  const checkForWinner = (board) => {\n    for (let i = 0; i < win_combinations.length; i++) {\n      const [x, y, z] = win_combinations[i];\n      // Iterate through win conditions and check if either player satisfies them\n      if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n        setTurns(1);\n        setGameOver(true);\n        return board[x];\n      }\n    }\n  };\n  const redo = () => {\n    if (!equalArray(board, last_board)) {\n      setTurns(turns - (is_one_player ? 2 : 1));\n      setBoard(last_board);\n      if (is_one_player === false) {\n        setOnePlayer(is_one_player);\n        if (!allEmpty()) setXPlaying(!is_x_playing);\n      }\n    }\n  };\n\n  const changeMode = () => {\n    setXPlaying(true);\n    setOnePlayer(!is_one_player);\n    restartGame();\n  };\n\n  return (\n    <div className=\"Home\">\n      <ScoreBoard scores={scores} is_x_playing={is_x_playing} />\n      <NumberPlayer mode={is_one_player} changeMode={changeMode} />\n      <Board\n        board={board}\n        onClick={is_game_over ? resetBoard : mainBoardHandling}\n      />\n      <RedoButton redo={redo} />\n      <ResetAndRestart resetBoard={resetBoard} restartGame={restartGame} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./styles.css\";\nfunction openTab() {\n  window.open(\"https://github.com/TheLordSaurabh/tic-tac-toe-game\");\n}\nexport default function Source() {\n  openTab();\n  window.location.href = \"/\";\n  return null;\n}\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nexport default function About() {\r\n  return (\r\n    <div>\r\n      <div className=\"about\">\r\n        <h3>\r\n          Tic-Tac-Toe Game (Web Application) made using React Js. It has a\r\n          special Human vs Computer Mode in which User can play against the\r\n          Computer. This feature is implemented using one of the AI Methods\r\n          (Game Tree Search - Mini-Max Algorithm with Alpha-Beta Pruning)\r\n        </h3>\r\n      </div>\r\n      <div className=\"about\">\r\n        <h3>\r\n          Fun Fact : It's impossible to win against the inbuilt AI. You either\r\n          lose the match or there is a tie.\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nexport default function Developer() {\r\n  return (\r\n    <div>\r\n      <div className=\"developers\">\r\n        <h4>\r\n          This project is made by Saurabh Gupta and Ananya M. Saurabh is\r\n          Computer Science and Engineering Undergradute (B. Tech CSE (2020-24) @\r\n          IIITDM Kancheepuram) while Ananya M. is Computer Science and\r\n          Artificial Intelligence Undergradute(B. Tech CS-AI (2021-25) @IIITDM\r\n          Kancheepuram).{\" \"}\r\n        </h4>\r\n        <h4>\r\n          Both together have created this Project under Dr. Ram Prasad Padhy Sir\r\n          (Professor in Computer Science Field at IIITDM Kancheepuram) under his\r\n          Course Artificial Intelligence.\r\n        </h4>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Nav() {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"logo\">Tic Tac Toe</div>\r\n      <ul className=\"nav-links\">\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/source-code\">Source Code</Link>\r\n        <Link to=\"/about\">About</Link>\r\n        <Link to=\"/developer\">Developers</Link>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./styles.css\";\nimport Home from \"./Home\";\nimport Source from \"./Source\";\nimport About from \"./About\";\nimport Developer from \"./Developer\";\nimport Nav from \"./Nav\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/source-code\" component={Source} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/developer\" component={Developer} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}